package qd
package learner
import org.scalatest.{FunSuite, Ignore}

class Knight extends Problem {
	override val name = "knightsmove_large"
	val VSet = Range(0, 256).map(i => Atom(i)).toSet
	val V = Domain("V", VSet)
	val east = Relation("east", V,V)
	val sw = Relation("sw", V,V)
	val se = Relation("se", V,V)
	val south = Relation("south", V,V)
	val knight = Relation("knight", V,V)
	val knightTuples = Set((0, 33),(16, 49),(32, 65),(48, 81),(64, 97),(80, 113),(96, 129),(112, 145),(128, 161),(144, 177),(160, 193),(176, 209),(192, 225),(208, 241),(1, 34),(17, 50),(33, 66),(49, 82),(65, 98),(81, 114),(97, 130),(113, 146),(129, 162),(145, 178),(161, 194),(177, 210),(193, 226),(209, 242),(2, 35),(18, 51),(34, 67),(50, 83),(66, 99),(82, 115),(98, 131),(114, 147),(130, 163),(146, 179),(162, 195),(178, 211),(194, 227),(210, 243),(3, 36),(19, 52),(35, 68),(51, 84),(67, 100),(83, 116),(99, 132),(115, 148),(131, 164),(147, 180),(163, 196),(179, 212),(195, 228),(211, 244),(4, 37),(20, 53),(36, 69),(52, 85),(68, 101),(84, 117),(100, 133),(116, 149),(132, 165),(148, 181),(164, 197),(180, 213),(196, 229),(212, 245),(5, 38),(21, 54),(37, 70),(53, 86),(69, 102),(85, 118),(101, 134),(117, 150),(133, 166),(149, 182),(165, 198),(181, 214),(197, 230),(213, 246),(6, 39),(22, 55),(38, 71),(54, 87),(70, 103),(86, 119),(102, 135),(118, 151),(134, 167),(150, 183),(166, 199),(182, 215),(198, 231),(214, 247),(7, 40),(23, 56),(39, 72),(55, 88),(71, 104),(87, 120),(103, 136),(119, 152),(135, 168),(151, 184),(167, 200),(183, 216),(199, 232),(215, 248),(8, 41),(24, 57),(40, 73),(56, 89),(72, 105),(88, 121),(104, 137),(120, 153),(136, 169),(152, 185),(168, 201),(184, 217),(200, 233),(216, 249),(9, 42),(25, 58),(41, 74),(57, 90),(73, 106),(89, 122),(105, 138),(121, 154),(137, 170),(153, 186),(169, 202),(185, 218),(201, 234),(217, 250),(10, 43),(26, 59),(42, 75),(58, 91),(74, 107),(90, 123),(106, 139),(122, 155),(138, 171),(154, 187),(170, 203),(186, 219),(202, 235),(218, 251),(11, 44),(27, 60),(43, 76),(59, 92),(75, 108),(91, 124),(107, 140),(123, 156),(139, 172),(155, 188),(171, 204),(187, 220),(203, 236),(219, 252),(12, 45),(28, 61),(44, 77),(60, 93),(76, 109),(92, 125),(108, 141),(124, 157),(140, 173),(156, 189),(172, 205),(188, 221),(204, 237),(220, 253),(13, 46),(29, 62),(45, 78),(61, 94),(77, 110),(93, 126),(109, 142),(125, 158),(141, 174),(157, 190),(173, 206),(189, 222),(205, 238),(221, 254),(14, 47),(30, 63),(46, 79),(62, 95),(78, 111),(94, 127),(110, 143),(126, 159),(142, 175),(158, 191),(174, 207),(190, 223),(206, 239),(222, 255)).map { case (x0,x1) => DTuple(Atom(x0),Atom(x1)) }
	val eastTuples = Set((0, 1),(16, 17),(32, 33),(48, 49),(64, 65),(80, 81),(96, 97),(112, 113),(128, 129),(144, 145),(160, 161),(176, 177),(192, 193),(208, 209),(224, 225),(240, 241),(1, 2),(17, 18),(33, 34),(49, 50),(65, 66),(81, 82),(97, 98),(113, 114),(129, 130),(145, 146),(161, 162),(177, 178),(193, 194),(209, 210),(225, 226),(241, 242),(2, 3),(18, 19),(34, 35),(50, 51),(66, 67),(82, 83),(98, 99),(114, 115),(130, 131),(146, 147),(162, 163),(178, 179),(194, 195),(210, 211),(226, 227),(242, 243),(3, 4),(19, 20),(35, 36),(51, 52),(67, 68),(83, 84),(99, 100),(115, 116),(131, 132),(147, 148),(163, 164),(179, 180),(195, 196),(211, 212),(227, 228),(243, 244),(4, 5),(20, 21),(36, 37),(52, 53),(68, 69),(84, 85),(100, 101),(116, 117),(132, 133),(148, 149),(164, 165),(180, 181),(196, 197),(212, 213),(228, 229),(244, 245),(5, 6),(21, 22),(37, 38),(53, 54),(69, 70),(85, 86),(101, 102),(117, 118),(133, 134),(149, 150),(165, 166),(181, 182),(197, 198),(213, 214),(229, 230),(245, 246),(6, 7),(22, 23),(38, 39),(54, 55),(70, 71),(86, 87),(102, 103),(118, 119),(134, 135),(150, 151),(166, 167),(182, 183),(198, 199),(214, 215),(230, 231),(246, 247),(7, 8),(23, 24),(39, 40),(55, 56),(71, 72),(87, 88),(103, 104),(119, 120),(135, 136),(151, 152),(167, 168),(183, 184),(199, 200),(215, 216),(231, 232),(247, 248),(8, 9),(24, 25),(40, 41),(56, 57),(72, 73),(88, 89),(104, 105),(120, 121),(136, 137),(152, 153),(168, 169),(184, 185),(200, 201),(216, 217),(232, 233),(248, 249),(9, 10),(25, 26),(41, 42),(57, 58),(73, 74),(89, 90),(105, 106),(121, 122),(137, 138),(153, 154),(169, 170),(185, 186),(201, 202),(217, 218),(233, 234),(249, 250),(10, 11),(26, 27),(42, 43),(58, 59),(74, 75),(90, 91),(106, 107),(122, 123),(138, 139),(154, 155),(170, 171),(186, 187),(202, 203),(218, 219),(234, 235),(250, 251),(11, 12),(27, 28),(43, 44),(59, 60),(75, 76),(91, 92),(107, 108),(123, 124),(139, 140),(155, 156),(171, 172),(187, 188),(203, 204),(219, 220),(235, 236),(251, 252),(12, 13),(28, 29),(44, 45),(60, 61),(76, 77),(92, 93),(108, 109),(124, 125),(140, 141),(156, 157),(172, 173),(188, 189),(204, 205),(220, 221),(236, 237),(252, 253),(13, 14),(29, 30),(45, 46),(61, 62),(77, 78),(93, 94),(109, 110),(125, 126),(141, 142),(157, 158),(173, 174),(189, 190),(205, 206),(221, 222),(237, 238),(253, 254),(14, 15),(30, 31),(46, 47),(62, 63),(78, 79),(94, 95),(110, 111),(126, 127),(142, 143),(158, 159),(174, 175),(190, 191),(206, 207),(222, 223),(238, 239),(254, 255)).map { case (x0,x1) => DTuple(Atom(x0),Atom(x1)) }
	val swTuples = Set((1, 16),(17, 32),(33, 48),(49, 64),(65, 80),(81, 96),(97, 112),(113, 128),(129, 144),(145, 160),(161, 176),(177, 192),(193, 208),(209, 224),(225, 240),(2, 17),(18, 33),(34, 49),(50, 65),(66, 81),(82, 97),(98, 113),(114, 129),(130, 145),(146, 161),(162, 177),(178, 193),(194, 209),(210, 225),(226, 241),(3, 18),(19, 34),(35, 50),(51, 66),(67, 82),(83, 98),(99, 114),(115, 130),(131, 146),(147, 162),(163, 178),(179, 194),(195, 210),(211, 226),(227, 242),(4, 19),(20, 35),(36, 51),(52, 67),(68, 83),(84, 99),(100, 115),(116, 131),(132, 147),(148, 163),(164, 179),(180, 195),(196, 211),(212, 227),(228, 243),(5, 20),(21, 36),(37, 52),(53, 68),(69, 84),(85, 100),(101, 116),(117, 132),(133, 148),(149, 164),(165, 180),(181, 196),(197, 212),(213, 228),(229, 244),(6, 21),(22, 37),(38, 53),(54, 69),(70, 85),(86, 101),(102, 117),(118, 133),(134, 149),(150, 165),(166, 181),(182, 197),(198, 213),(214, 229),(230, 245),(7, 22),(23, 38),(39, 54),(55, 70),(71, 86),(87, 102),(103, 118),(119, 134),(135, 150),(151, 166),(167, 182),(183, 198),(199, 214),(215, 230),(231, 246),(8, 23),(24, 39),(40, 55),(56, 71),(72, 87),(88, 103),(104, 119),(120, 135),(136, 151),(152, 167),(168, 183),(184, 199),(200, 215),(216, 231),(232, 247),(9, 24),(25, 40),(41, 56),(57, 72),(73, 88),(89, 104),(105, 120),(121, 136),(137, 152),(153, 168),(169, 184),(185, 200),(201, 216),(217, 232),(233, 248),(10, 25),(26, 41),(42, 57),(58, 73),(74, 89),(90, 105),(106, 121),(122, 137),(138, 153),(154, 169),(170, 185),(186, 201),(202, 217),(218, 233),(234, 249),(11, 26),(27, 42),(43, 58),(59, 74),(75, 90),(91, 106),(107, 122),(123, 138),(139, 154),(155, 170),(171, 186),(187, 202),(203, 218),(219, 234),(235, 250),(12, 27),(28, 43),(44, 59),(60, 75),(76, 91),(92, 107),(108, 123),(124, 139),(140, 155),(156, 171),(172, 187),(188, 203),(204, 219),(220, 235),(236, 251),(13, 28),(29, 44),(45, 60),(61, 76),(77, 92),(93, 108),(109, 124),(125, 140),(141, 156),(157, 172),(173, 188),(189, 204),(205, 220),(221, 236),(237, 252),(14, 29),(30, 45),(46, 61),(62, 77),(78, 93),(94, 109),(110, 125),(126, 141),(142, 157),(158, 173),(174, 189),(190, 205),(206, 221),(222, 237),(238, 253),(15, 30),(31, 46),(47, 62),(63, 78),(79, 94),(95, 110),(111, 126),(127, 142),(143, 158),(159, 174),(175, 190),(191, 206),(207, 222),(223, 238),(239, 254)).map { case (x0,x1) => DTuple(Atom(x0),Atom(x1)) }
	val southTuples = Set((0, 16),(16, 32),(32, 48),(48, 64),(64, 80),(80, 96),(96, 112),(112, 128),(128, 144),(144, 160),(160, 176),(176, 192),(192, 208),(208, 224),(224, 240),(1, 17),(17, 33),(33, 49),(49, 65),(65, 81),(81, 97),(97, 113),(113, 129),(129, 145),(145, 161),(161, 177),(177, 193),(193, 209),(209, 225),(225, 241),(2, 18),(18, 34),(34, 50),(50, 66),(66, 82),(82, 98),(98, 114),(114, 130),(130, 146),(146, 162),(162, 178),(178, 194),(194, 210),(210, 226),(226, 242),(3, 19),(19, 35),(35, 51),(51, 67),(67, 83),(83, 99),(99, 115),(115, 131),(131, 147),(147, 163),(163, 179),(179, 195),(195, 211),(211, 227),(227, 243),(4, 20),(20, 36),(36, 52),(52, 68),(68, 84),(84, 100),(100, 116),(116, 132),(132, 148),(148, 164),(164, 180),(180, 196),(196, 212),(212, 228),(228, 244),(5, 21),(21, 37),(37, 53),(53, 69),(69, 85),(85, 101),(101, 117),(117, 133),(133, 149),(149, 165),(165, 181),(181, 197),(197, 213),(213, 229),(229, 245),(6, 22),(22, 38),(38, 54),(54, 70),(70, 86),(86, 102),(102, 118),(118, 134),(134, 150),(150, 166),(166, 182),(182, 198),(198, 214),(214, 230),(230, 246),(7, 23),(23, 39),(39, 55),(55, 71),(71, 87),(87, 103),(103, 119),(119, 135),(135, 151),(151, 167),(167, 183),(183, 199),(199, 215),(215, 231),(231, 247),(8, 24),(24, 40),(40, 56),(56, 72),(72, 88),(88, 104),(104, 120),(120, 136),(136, 152),(152, 168),(168, 184),(184, 200),(200, 216),(216, 232),(232, 248),(9, 25),(25, 41),(41, 57),(57, 73),(73, 89),(89, 105),(105, 121),(121, 137),(137, 153),(153, 169),(169, 185),(185, 201),(201, 217),(217, 233),(233, 249),(10, 26),(26, 42),(42, 58),(58, 74),(74, 90),(90, 106),(106, 122),(122, 138),(138, 154),(154, 170),(170, 186),(186, 202),(202, 218),(218, 234),(234, 250),(11, 27),(27, 43),(43, 59),(59, 75),(75, 91),(91, 107),(107, 123),(123, 139),(139, 155),(155, 171),(171, 187),(187, 203),(203, 219),(219, 235),(235, 251),(12, 28),(28, 44),(44, 60),(60, 76),(76, 92),(92, 108),(108, 124),(124, 140),(140, 156),(156, 172),(172, 188),(188, 204),(204, 220),(220, 236),(236, 252),(13, 29),(29, 45),(45, 61),(61, 77),(77, 93),(93, 109),(109, 125),(125, 141),(141, 157),(157, 173),(173, 189),(189, 205),(205, 221),(221, 237),(237, 253),(14, 30),(30, 46),(46, 62),(62, 78),(78, 94),(94, 110),(110, 126),(126, 142),(142, 158),(158, 174),(174, 190),(190, 206),(206, 222),(222, 238),(238, 254),(15, 31),(31, 47),(47, 63),(63, 79),(79, 95),(95, 111),(111, 127),(127, 143),(143, 159),(159, 175),(175, 191),(191, 207),(207, 223),(223, 239),(239, 255)).map { case (x0,x1) => DTuple(Atom(x0),Atom(x1)) }
	val seTuples = Set((0, 17),(16, 33),(32, 49),(48, 65),(64, 81),(80, 97),(96, 113),(112, 129),(128, 145),(144, 161),(160, 177),(176, 193),(192, 209),(208, 225),(224, 241),(1, 18),(17, 34),(33, 50),(49, 66),(65, 82),(81, 98),(97, 114),(113, 130),(129, 146),(145, 162),(161, 178),(177, 194),(193, 210),(209, 226),(225, 242),(2, 19),(18, 35),(34, 51),(50, 67),(66, 83),(82, 99),(98, 115),(114, 131),(130, 147),(146, 163),(162, 179),(178, 195),(194, 211),(210, 227),(226, 243),(3, 20),(19, 36),(35, 52),(51, 68),(67, 84),(83, 100),(99, 116),(115, 132),(131, 148),(147, 164),(163, 180),(179, 196),(195, 212),(211, 228),(227, 244),(4, 21),(20, 37),(36, 53),(52, 69),(68, 85),(84, 101),(100, 117),(116, 133),(132, 149),(148, 165),(164, 181),(180, 197),(196, 213),(212, 229),(228, 245),(5, 22),(21, 38),(37, 54),(53, 70),(69, 86),(85, 102),(101, 118),(117, 134),(133, 150),(149, 166),(165, 182),(181, 198),(197, 214),(213, 230),(229, 246),(6, 23),(22, 39),(38, 55),(54, 71),(70, 87),(86, 103),(102, 119),(118, 135),(134, 151),(150, 167),(166, 183),(182, 199),(198, 215),(214, 231),(230, 247),(7, 24),(23, 40),(39, 56),(55, 72),(71, 88),(87, 104),(103, 120),(119, 136),(135, 152),(151, 168),(167, 184),(183, 200),(199, 216),(215, 232),(231, 248),(8, 25),(24, 41),(40, 57),(56, 73),(72, 89),(88, 105),(104, 121),(120, 137),(136, 153),(152, 169),(168, 185),(184, 201),(200, 217),(216, 233),(232, 249),(9, 26),(25, 42),(41, 58),(57, 74),(73, 90),(89, 106),(105, 122),(121, 138),(137, 154),(153, 170),(169, 186),(185, 202),(201, 218),(217, 234),(233, 250),(10, 27),(26, 43),(42, 59),(58, 75),(74, 91),(90, 107),(106, 123),(122, 139),(138, 155),(154, 171),(170, 187),(186, 203),(202, 219),(218, 235),(234, 251),(11, 28),(27, 44),(43, 60),(59, 76),(75, 92),(91, 108),(107, 124),(123, 140),(139, 156),(155, 172),(171, 188),(187, 204),(203, 220),(219, 236),(235, 252),(12, 29),(28, 45),(44, 61),(60, 77),(76, 93),(92, 109),(108, 125),(124, 141),(140, 157),(156, 173),(172, 189),(188, 205),(204, 221),(220, 237),(236, 253),(13, 30),(29, 46),(45, 62),(61, 78),(77, 94),(93, 110),(109, 126),(125, 142),(141, 158),(157, 174),(173, 190),(189, 206),(205, 222),(221, 238),(237, 254),(14, 31),(30, 47),(46, 63),(62, 79),(78, 95),(94, 111),(110, 127),(126, 143),(142, 159),(158, 175),(174, 191),(190, 207),(206, 223),(222, 239),(238, 255)).map { case (x0,x1) => DTuple(Atom(x0),Atom(x1)) }
	override val edb = Config(
		east -> (Instance(east) ++ eastTuples.map(t => t -> One).toMap),
		sw -> (Instance(sw) ++ swTuples.map(t => t -> One).toMap),
		se -> (Instance(se) ++ seTuples.map(t => t -> One).toMap),
		south -> (Instance(south) ++ southTuples.map(t => t -> One).toMap),
	)
	override val refOut = Config(
		knight -> (Instance(knight) ++ knightTuples.map(t => t -> One).toMap),
	)
	val y = Variable("y",V)
	val x = Variable("x",V)
	val z = Variable("z",V)
	val soup = Set(
		Rule(1, Value(0.500000, Token(1)), knight(x,y),east(x,z),south(z,y)),
		Rule(2, Value(0.500000, Token(2)), knight(x,y),east(z,x),south(z,y)),
		Rule(3, Value(0.500000, Token(3)), knight(x,y),east(x,z),south(y,z)),
		Rule(4, Value(0.500000, Token(4)), knight(x,y),east(z,x),south(y,z)),
		Rule(5, Value(0.500000, Token(5)), knight(x,y),east(x,z),east(z,y)),
		Rule(6, Value(0.500000, Token(6)), knight(x,y),east(z,x),east(z,y)),
		Rule(7, Value(0.500000, Token(7)), knight(x,y),east(x,z),east(y,z)),
		Rule(8, Value(0.500000, Token(8)), knight(x,y),east(z,x),east(y,z)),
		Rule(9, Value(0.500000, Token(9)), knight(x,y),east(x,z),se(z,y)),
		Rule(10, Value(0.500000, Token(10)), knight(x,y),east(z,x),se(z,y)),
		Rule(11, Value(0.500000, Token(11)), knight(x,y),east(x,z),se(y,z)),
		Rule(12, Value(0.500000, Token(12)), knight(x,y),east(z,x),se(y,z)),
		Rule(13, Value(0.500000, Token(13)), knight(x,y),east(x,z),sw(z,y)),
		Rule(14, Value(0.500000, Token(14)), knight(x,y),east(z,x),sw(z,y)),
		Rule(15, Value(0.500000, Token(15)), knight(x,y),east(x,z),sw(y,z)),
		Rule(16, Value(0.500000, Token(16)), knight(x,y),east(z,x),sw(y,z)),
		Rule(17, Value(0.500000, Token(17)), knight(x,y),south(x,z),south(z,y)),
		Rule(18, Value(0.500000, Token(18)), knight(x,y),south(z,x),south(z,y)),
		Rule(19, Value(0.500000, Token(19)), knight(x,y),south(x,z),south(y,z)),
		Rule(20, Value(0.500000, Token(20)), knight(x,y),south(z,x),south(y,z)),
		Rule(21, Value(0.500000, Token(21)), knight(x,y),south(x,z),se(z,y)),
		Rule(22, Value(0.500000, Token(22)), knight(x,y),south(z,x),se(z,y)),
		Rule(23, Value(0.500000, Token(23)), knight(x,y),south(x,z),se(y,z)),
		Rule(24, Value(0.500000, Token(24)), knight(x,y),south(z,x),se(y,z)),
		Rule(25, Value(0.500000, Token(25)), knight(x,y),south(x,z),sw(z,y)),
		Rule(26, Value(0.500000, Token(26)), knight(x,y),south(z,x),sw(z,y)),
		Rule(27, Value(0.500000, Token(27)), knight(x,y),south(x,z),sw(y,z)),
		Rule(28, Value(0.500000, Token(28)), knight(x,y),south(z,x),sw(y,z)),
		Rule(29, Value(0.500000, Token(29)), knight(x,y),se(x,z),se(z,y)),
		Rule(30, Value(0.500000, Token(30)), knight(x,y),se(z,x),se(z,y)),
		Rule(31, Value(0.500000, Token(31)), knight(x,y),se(x,z),se(y,z)),
		Rule(32, Value(0.500000, Token(32)), knight(x,y),se(z,x),se(y,z)),
		Rule(33, Value(0.500000, Token(33)), knight(x,y),se(x,z),sw(z,y)),
		Rule(34, Value(0.500000, Token(34)), knight(x,y),se(z,x),sw(z,y)),
		Rule(35, Value(0.500000, Token(35)), knight(x,y),se(x,z),sw(y,z)),
		Rule(36, Value(0.500000, Token(36)), knight(x,y),se(z,x),sw(y,z)),
		Rule(37, Value(0.500000, Token(37)), knight(x,y),sw(x,z),sw(z,y)),
		Rule(38, Value(0.500000, Token(38)), knight(x,y),sw(z,x),sw(z,y)),
		Rule(39, Value(0.500000, Token(39)), knight(x,y),sw(x,z),sw(y,z)),
		Rule(40, Value(0.500000, Token(40)), knight(x,y),sw(z,x),sw(y,z)),
	)
	val soupProg = Program("knightsmove_largeSoup", soup)
	val evaluator = SeminaiveEvaluator(soupProg)

	val expected = Set(21)
  val maxVarCount = 3
}
